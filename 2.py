#!/usr/bin/python2

"""
Statement:

Each new term in the Fibonacci sequence is generated by adding
the previous two terms. By starting with 1 and 2,
the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values
do not exceed four million, find the sum of the even-valued terms.

=====================================================

Prelude:

The ratio of two consecutive terms in the Fibonacci sequence
converges to the golden ratio. This has some interesting
derivations to find the nth term.

Binet's formula is used below to calculate the n-th element.
http://mathworld.wolfram.com/BinetsFibonacciNumberFormula.html

"""


from unittest import TestCase, main
from utils import fibn


class Problem2(object):

    def __init__(self, bound):
        self.bound = bound

    def gen_series(self):
        i, val = (0, 0)
        while val < self.bound:
            val = fibn(i)
            yield int(val)
            i += 1

    def fn(self):
        return sum([i for i in self.gen_series() if not i % 2])


class TestProblem2(TestCase):

    def setUp(self):
        self.bound = 4000000
        self.answer = 4613732

    def test_main(self):
        self.assertEqual(Problem2(self.bound).fn(), self.answer)


if __name__ == '__main__':
    main()
